
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000257c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026a8  080026a8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080026a8  080026a8  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026a8  080026a8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026a8  080026a8  000126a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080026b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000009c  0800274c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  0800274c  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009247  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c14  00000000  00000000  0002930c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002af20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dab  00000000  00000000  0002c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b950  00000000  00000000  000430b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822f1  00000000  00000000  0004ea03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0cf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002908  00000000  00000000  000d0d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002670 	.word	0x08002670

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08002670 	.word	0x08002670

0800014c <fsm_auto_ver>:
/* Init -----*/
int status_auto_ver = INIT;
int status_auto_hor = INIT;

/* Function -----*/
void fsm_auto_ver(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  if(isTimerFlag(CLOCK_TIMER1)) {
 8000150:	2003      	movs	r0, #3
 8000152:	f000 feff 	bl	8000f54 <isTimerFlag>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d009      	beq.n	8000170 <fsm_auto_ver+0x24>
    time_ver--;
 800015c:	4b4b      	ldr	r3, [pc, #300]	; (800028c <fsm_auto_ver+0x140>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	3b01      	subs	r3, #1
 8000162:	4a4a      	ldr	r2, [pc, #296]	; (800028c <fsm_auto_ver+0x140>)
 8000164:	6013      	str	r3, [r2, #0]
    setTimer(CLOCK_TIME, CLOCK_TIMER1);
 8000166:	2103      	movs	r1, #3
 8000168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800016c:	f000 fecc 	bl	8000f08 <setTimer>
  }
  switch(status_auto_ver) {
 8000170:	4b47      	ldr	r3, [pc, #284]	; (8000290 <fsm_auto_ver+0x144>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	2b03      	cmp	r3, #3
 8000176:	f200 8087 	bhi.w	8000288 <fsm_auto_ver+0x13c>
 800017a:	a201      	add	r2, pc, #4	; (adr r2, 8000180 <fsm_auto_ver+0x34>)
 800017c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000180:	08000191 	.word	0x08000191
 8000184:	080001bf 	.word	0x080001bf
 8000188:	080001ff 	.word	0x080001ff
 800018c:	0800023f 	.word	0x0800023f
  case INIT:
    status_auto_ver = RED_STATE;
 8000190:	4b3f      	ldr	r3, [pc, #252]	; (8000290 <fsm_auto_ver+0x144>)
 8000192:	2201      	movs	r2, #1
 8000194:	601a      	str	r2, [r3, #0]
    time_ver = time_red;
 8000196:	4b3f      	ldr	r3, [pc, #252]	; (8000294 <fsm_auto_ver+0x148>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a3c      	ldr	r2, [pc, #240]	; (800028c <fsm_auto_ver+0x140>)
 800019c:	6013      	str	r3, [r2, #0]
    setTimer(time_red * TIME_UNIT, VER_TIMER);
 800019e:	4b3d      	ldr	r3, [pc, #244]	; (8000294 <fsm_auto_ver+0x148>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001a6:	fb02 f303 	mul.w	r3, r2, r3
 80001aa:	2101      	movs	r1, #1
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 feab 	bl	8000f08 <setTimer>
    setTimer(CLOCK_TIME, CLOCK_TIMER1);
 80001b2:	2103      	movs	r1, #3
 80001b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b8:	f000 fea6 	bl	8000f08 <setTimer>
    break;
 80001bc:	e064      	b.n	8000288 <fsm_auto_ver+0x13c>
  case RED_STATE:
	LED_on_ver(RED);
 80001be:	2000      	movs	r0, #0
 80001c0:	f000 fcfa 	bl	8000bb8 <LED_on_ver>
	if(isTimerFlag(VER_TIMER) == 1) {
 80001c4:	2001      	movs	r0, #1
 80001c6:	f000 fec5 	bl	8000f54 <isTimerFlag>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d156      	bne.n	800027e <fsm_auto_ver+0x132>
	  status_auto_ver = GREEN_STATE;
 80001d0:	4b2f      	ldr	r3, [pc, #188]	; (8000290 <fsm_auto_ver+0x144>)
 80001d2:	2203      	movs	r2, #3
 80001d4:	601a      	str	r2, [r3, #0]
	  time_ver = time_green;
 80001d6:	4b30      	ldr	r3, [pc, #192]	; (8000298 <fsm_auto_ver+0x14c>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a2c      	ldr	r2, [pc, #176]	; (800028c <fsm_auto_ver+0x140>)
 80001dc:	6013      	str	r3, [r2, #0]
	  setTimer(time_green * TIME_UNIT, VER_TIMER);
 80001de:	4b2e      	ldr	r3, [pc, #184]	; (8000298 <fsm_auto_ver+0x14c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001e6:	fb02 f303 	mul.w	r3, r2, r3
 80001ea:	2101      	movs	r1, #1
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fe8b 	bl	8000f08 <setTimer>
	  setTimer(CLOCK_TIME, CLOCK_TIMER1);
 80001f2:	2103      	movs	r1, #3
 80001f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f8:	f000 fe86 	bl	8000f08 <setTimer>
	}
    break;
 80001fc:	e03f      	b.n	800027e <fsm_auto_ver+0x132>
  case YELLOW_STATE:
	LED_on_ver(YELLOW);
 80001fe:	2001      	movs	r0, #1
 8000200:	f000 fcda 	bl	8000bb8 <LED_on_ver>
	if(isTimerFlag(VER_TIMER) == 1) {
 8000204:	2001      	movs	r0, #1
 8000206:	f000 fea5 	bl	8000f54 <isTimerFlag>
 800020a:	4603      	mov	r3, r0
 800020c:	2b01      	cmp	r3, #1
 800020e:	d138      	bne.n	8000282 <fsm_auto_ver+0x136>
	  status_auto_ver = RED_STATE;
 8000210:	4b1f      	ldr	r3, [pc, #124]	; (8000290 <fsm_auto_ver+0x144>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
	  time_ver = time_red;
 8000216:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <fsm_auto_ver+0x148>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a1c      	ldr	r2, [pc, #112]	; (800028c <fsm_auto_ver+0x140>)
 800021c:	6013      	str	r3, [r2, #0]
	  setTimer(time_red * TIME_UNIT, VER_TIMER);
 800021e:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <fsm_auto_ver+0x148>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000226:	fb02 f303 	mul.w	r3, r2, r3
 800022a:	2101      	movs	r1, #1
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fe6b 	bl	8000f08 <setTimer>
	  setTimer(CLOCK_TIME, CLOCK_TIMER1);
 8000232:	2103      	movs	r1, #3
 8000234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000238:	f000 fe66 	bl	8000f08 <setTimer>
	}
    break;
 800023c:	e021      	b.n	8000282 <fsm_auto_ver+0x136>
  case GREEN_STATE:
	LED_on_ver(GREEN);
 800023e:	2002      	movs	r0, #2
 8000240:	f000 fcba 	bl	8000bb8 <LED_on_ver>
	if(isTimerFlag(VER_TIMER) == 1) {
 8000244:	2001      	movs	r0, #1
 8000246:	f000 fe85 	bl	8000f54 <isTimerFlag>
 800024a:	4603      	mov	r3, r0
 800024c:	2b01      	cmp	r3, #1
 800024e:	d11a      	bne.n	8000286 <fsm_auto_ver+0x13a>
	  status_auto_ver = YELLOW_STATE;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <fsm_auto_ver+0x144>)
 8000252:	2202      	movs	r2, #2
 8000254:	601a      	str	r2, [r3, #0]
	  time_ver = time_yellow;
 8000256:	4b11      	ldr	r3, [pc, #68]	; (800029c <fsm_auto_ver+0x150>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a0c      	ldr	r2, [pc, #48]	; (800028c <fsm_auto_ver+0x140>)
 800025c:	6013      	str	r3, [r2, #0]
	  setTimer(time_yellow * TIME_UNIT, VER_TIMER);
 800025e:	4b0f      	ldr	r3, [pc, #60]	; (800029c <fsm_auto_ver+0x150>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000266:	fb02 f303 	mul.w	r3, r2, r3
 800026a:	2101      	movs	r1, #1
 800026c:	4618      	mov	r0, r3
 800026e:	f000 fe4b 	bl	8000f08 <setTimer>
	  setTimer(CLOCK_TIME, CLOCK_TIMER1);
 8000272:	2103      	movs	r1, #3
 8000274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000278:	f000 fe46 	bl	8000f08 <setTimer>
	}
    break;
 800027c:	e003      	b.n	8000286 <fsm_auto_ver+0x13a>
    break;
 800027e:	bf00      	nop
 8000280:	e002      	b.n	8000288 <fsm_auto_ver+0x13c>
    break;
 8000282:	bf00      	nop
 8000284:	e000      	b.n	8000288 <fsm_auto_ver+0x13c>
    break;
 8000286:	bf00      	nop
  }
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	200000c8 	.word	0x200000c8
 8000290:	200000b8 	.word	0x200000b8
 8000294:	20000004 	.word	0x20000004
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000008 	.word	0x20000008

080002a0 <fsm_auto_hor>:
void fsm_auto_hor(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  if(isTimerFlag(CLOCK_TIMER2)) {
 80002a4:	2004      	movs	r0, #4
 80002a6:	f000 fe55 	bl	8000f54 <isTimerFlag>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d009      	beq.n	80002c4 <fsm_auto_hor+0x24>
    time_hor--;
 80002b0:	4b4b      	ldr	r3, [pc, #300]	; (80003e0 <fsm_auto_hor+0x140>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	4a4a      	ldr	r2, [pc, #296]	; (80003e0 <fsm_auto_hor+0x140>)
 80002b8:	6013      	str	r3, [r2, #0]
    setTimer(CLOCK_TIME, CLOCK_TIMER2);
 80002ba:	2104      	movs	r1, #4
 80002bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c0:	f000 fe22 	bl	8000f08 <setTimer>
  }
  switch(status_auto_hor) {
 80002c4:	4b47      	ldr	r3, [pc, #284]	; (80003e4 <fsm_auto_hor+0x144>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b03      	cmp	r3, #3
 80002ca:	f200 8087 	bhi.w	80003dc <fsm_auto_hor+0x13c>
 80002ce:	a201      	add	r2, pc, #4	; (adr r2, 80002d4 <fsm_auto_hor+0x34>)
 80002d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d4:	080002e5 	.word	0x080002e5
 80002d8:	08000313 	.word	0x08000313
 80002dc:	08000353 	.word	0x08000353
 80002e0:	08000393 	.word	0x08000393
  case INIT:
    status_auto_hor = GREEN_STATE;
 80002e4:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <fsm_auto_hor+0x144>)
 80002e6:	2203      	movs	r2, #3
 80002e8:	601a      	str	r2, [r3, #0]
    time_hor = time_green;
 80002ea:	4b3f      	ldr	r3, [pc, #252]	; (80003e8 <fsm_auto_hor+0x148>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a3c      	ldr	r2, [pc, #240]	; (80003e0 <fsm_auto_hor+0x140>)
 80002f0:	6013      	str	r3, [r2, #0]
    setTimer(time_green * TIME_UNIT, HOR_TIMER);
 80002f2:	4b3d      	ldr	r3, [pc, #244]	; (80003e8 <fsm_auto_hor+0x148>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002fa:	fb02 f303 	mul.w	r3, r2, r3
 80002fe:	2102      	movs	r1, #2
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fe01 	bl	8000f08 <setTimer>
    setTimer(CLOCK_TIME, CLOCK_TIMER2);
 8000306:	2104      	movs	r1, #4
 8000308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030c:	f000 fdfc 	bl	8000f08 <setTimer>
    break;
 8000310:	e064      	b.n	80003dc <fsm_auto_hor+0x13c>
  case RED_STATE:
	LED_on_hor(RED);
 8000312:	2000      	movs	r0, #0
 8000314:	f000 fc82 	bl	8000c1c <LED_on_hor>
	if(isTimerFlag(HOR_TIMER) == 1) {
 8000318:	2002      	movs	r0, #2
 800031a:	f000 fe1b 	bl	8000f54 <isTimerFlag>
 800031e:	4603      	mov	r3, r0
 8000320:	2b01      	cmp	r3, #1
 8000322:	d156      	bne.n	80003d2 <fsm_auto_hor+0x132>
	  status_auto_hor = GREEN_STATE;
 8000324:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <fsm_auto_hor+0x144>)
 8000326:	2203      	movs	r2, #3
 8000328:	601a      	str	r2, [r3, #0]
	  time_hor = time_green;
 800032a:	4b2f      	ldr	r3, [pc, #188]	; (80003e8 <fsm_auto_hor+0x148>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a2c      	ldr	r2, [pc, #176]	; (80003e0 <fsm_auto_hor+0x140>)
 8000330:	6013      	str	r3, [r2, #0]
	  setTimer(time_green * TIME_UNIT, HOR_TIMER);
 8000332:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <fsm_auto_hor+0x148>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800033a:	fb02 f303 	mul.w	r3, r2, r3
 800033e:	2102      	movs	r1, #2
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fde1 	bl	8000f08 <setTimer>
	  setTimer(CLOCK_TIME, CLOCK_TIMER2);
 8000346:	2104      	movs	r1, #4
 8000348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800034c:	f000 fddc 	bl	8000f08 <setTimer>
	}
    break;
 8000350:	e03f      	b.n	80003d2 <fsm_auto_hor+0x132>
  case YELLOW_STATE:
	LED_on_hor(YELLOW);
 8000352:	2001      	movs	r0, #1
 8000354:	f000 fc62 	bl	8000c1c <LED_on_hor>
	if(isTimerFlag(HOR_TIMER) == 1) {
 8000358:	2002      	movs	r0, #2
 800035a:	f000 fdfb 	bl	8000f54 <isTimerFlag>
 800035e:	4603      	mov	r3, r0
 8000360:	2b01      	cmp	r3, #1
 8000362:	d138      	bne.n	80003d6 <fsm_auto_hor+0x136>
	  status_auto_hor = RED_STATE;
 8000364:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <fsm_auto_hor+0x144>)
 8000366:	2201      	movs	r2, #1
 8000368:	601a      	str	r2, [r3, #0]
	  time_hor = time_red;
 800036a:	4b20      	ldr	r3, [pc, #128]	; (80003ec <fsm_auto_hor+0x14c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <fsm_auto_hor+0x140>)
 8000370:	6013      	str	r3, [r2, #0]
	  setTimer(time_red * TIME_UNIT, HOR_TIMER);
 8000372:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <fsm_auto_hor+0x14c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800037a:	fb02 f303 	mul.w	r3, r2, r3
 800037e:	2102      	movs	r1, #2
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fdc1 	bl	8000f08 <setTimer>
	  setTimer(CLOCK_TIME, CLOCK_TIMER2);
 8000386:	2104      	movs	r1, #4
 8000388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038c:	f000 fdbc 	bl	8000f08 <setTimer>
	}
    break;
 8000390:	e021      	b.n	80003d6 <fsm_auto_hor+0x136>
  case GREEN_STATE:
	LED_on_hor(GREEN);
 8000392:	2002      	movs	r0, #2
 8000394:	f000 fc42 	bl	8000c1c <LED_on_hor>
	if(isTimerFlag(HOR_TIMER) == 1) {
 8000398:	2002      	movs	r0, #2
 800039a:	f000 fddb 	bl	8000f54 <isTimerFlag>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d11a      	bne.n	80003da <fsm_auto_hor+0x13a>
	  status_auto_hor = YELLOW_STATE;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <fsm_auto_hor+0x144>)
 80003a6:	2202      	movs	r2, #2
 80003a8:	601a      	str	r2, [r3, #0]
	  time_hor = time_yellow;
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <fsm_auto_hor+0x150>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a0c      	ldr	r2, [pc, #48]	; (80003e0 <fsm_auto_hor+0x140>)
 80003b0:	6013      	str	r3, [r2, #0]
	  setTimer(time_yellow * TIME_UNIT, HOR_TIMER);
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <fsm_auto_hor+0x150>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ba:	fb02 f303 	mul.w	r3, r2, r3
 80003be:	2102      	movs	r1, #2
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 fda1 	bl	8000f08 <setTimer>
	  setTimer(CLOCK_TIME, CLOCK_TIMER2);
 80003c6:	2104      	movs	r1, #4
 80003c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003cc:	f000 fd9c 	bl	8000f08 <setTimer>
	}
    break;
 80003d0:	e003      	b.n	80003da <fsm_auto_hor+0x13a>
    break;
 80003d2:	bf00      	nop
 80003d4:	e002      	b.n	80003dc <fsm_auto_hor+0x13c>
    break;
 80003d6:	bf00      	nop
 80003d8:	e000      	b.n	80003dc <fsm_auto_hor+0x13c>
    break;
 80003da:	bf00      	nop
  }
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	200000cc 	.word	0x200000cc
 80003e4:	200000bc 	.word	0x200000bc
 80003e8:	2000000c 	.word	0x2000000c
 80003ec:	20000004 	.word	0x20000004
 80003f0:	20000008 	.word	0x20000008

080003f4 <setInit>:
//Set state to INIT
void setInit(void) {
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  status_auto_ver = INIT;
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <setInit+0x18>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
  status_auto_hor = INIT;
 80003fe:	4b04      	ldr	r3, [pc, #16]	; (8000410 <setInit+0x1c>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	200000b8 	.word	0x200000b8
 8000410:	200000bc 	.word	0x200000bc

08000414 <restartDisplay>:
int status_display = INIT;
int status_blink = INIT;

/* Function -----*/
//Set restart 7SEG display
void restartDisplay(void) {
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  status_display = INIT;
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <restartDisplay+0x14>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	200000c0 	.word	0x200000c0

0800042c <fsm_display>:
//7SEG LED display
void fsm_display(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  updateBuffer();
 8000430:	f000 fc74 	bl	8000d1c <updateBuffer>
  switch(status_display) {
 8000434:	4b3d      	ldr	r3, [pc, #244]	; (800052c <fsm_display+0x100>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b04      	cmp	r3, #4
 800043a:	d874      	bhi.n	8000526 <fsm_display+0xfa>
 800043c:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_display+0x18>)
 800043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000442:	bf00      	nop
 8000444:	08000459 	.word	0x08000459
 8000448:	08000469 	.word	0x08000469
 800044c:	08000495 	.word	0x08000495
 8000450:	080004c1 	.word	0x080004c1
 8000454:	080004ed 	.word	0x080004ed
  case INIT:
    status_display = EN0;
 8000458:	4b34      	ldr	r3, [pc, #208]	; (800052c <fsm_display+0x100>)
 800045a:	2201      	movs	r2, #1
 800045c:	601a      	str	r2, [r3, #0]
    setTimer(SCANNING_TIME, EN_TIMER);
 800045e:	2100      	movs	r1, #0
 8000460:	20fa      	movs	r0, #250	; 0xfa
 8000462:	f000 fd51 	bl	8000f08 <setTimer>
    break;
 8000466:	e05e      	b.n	8000526 <fsm_display+0xfa>
  case EN0:
    EN_on(EN0 - 1);
 8000468:	2000      	movs	r0, #0
 800046a:	f000 fc29 	bl	8000cc0 <EN_on>
    display7SEG(SEG_buffer[EN0 - 1]);
 800046e:	4b30      	ldr	r3, [pc, #192]	; (8000530 <fsm_display+0x104>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f000 fc92 	bl	8000d9c <display7SEG>
    if(isTimerFlag(EN_TIMER) == 1) {
 8000478:	2000      	movs	r0, #0
 800047a:	f000 fd6b 	bl	8000f54 <isTimerFlag>
 800047e:	4603      	mov	r3, r0
 8000480:	2b01      	cmp	r3, #1
 8000482:	d149      	bne.n	8000518 <fsm_display+0xec>
      status_display = EN1;
 8000484:	4b29      	ldr	r3, [pc, #164]	; (800052c <fsm_display+0x100>)
 8000486:	2202      	movs	r2, #2
 8000488:	601a      	str	r2, [r3, #0]
      setTimer(SCANNING_TIME, EN_TIMER);
 800048a:	2100      	movs	r1, #0
 800048c:	20fa      	movs	r0, #250	; 0xfa
 800048e:	f000 fd3b 	bl	8000f08 <setTimer>
    }
    break;
 8000492:	e041      	b.n	8000518 <fsm_display+0xec>
  case EN1:
	EN_on(EN1 - 1);
 8000494:	2001      	movs	r0, #1
 8000496:	f000 fc13 	bl	8000cc0 <EN_on>
    display7SEG(SEG_buffer[EN1 - 1]);
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <fsm_display+0x104>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 fc7c 	bl	8000d9c <display7SEG>
	if(isTimerFlag(EN_TIMER) == 1) {
 80004a4:	2000      	movs	r0, #0
 80004a6:	f000 fd55 	bl	8000f54 <isTimerFlag>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d135      	bne.n	800051c <fsm_display+0xf0>
	  status_display = EN2;
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <fsm_display+0x100>)
 80004b2:	2203      	movs	r2, #3
 80004b4:	601a      	str	r2, [r3, #0]
	  setTimer(SCANNING_TIME, EN_TIMER);
 80004b6:	2100      	movs	r1, #0
 80004b8:	20fa      	movs	r0, #250	; 0xfa
 80004ba:	f000 fd25 	bl	8000f08 <setTimer>
	}
	break;
 80004be:	e02d      	b.n	800051c <fsm_display+0xf0>
  case EN2:
	EN_on(EN2 - 1);
 80004c0:	2002      	movs	r0, #2
 80004c2:	f000 fbfd 	bl	8000cc0 <EN_on>
    display7SEG(SEG_buffer[EN2 - 1]);
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <fsm_display+0x104>)
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fc66 	bl	8000d9c <display7SEG>
	if(isTimerFlag(EN_TIMER) == 1) {
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 fd3f 	bl	8000f54 <isTimerFlag>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d121      	bne.n	8000520 <fsm_display+0xf4>
	  status_display = EN3;
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <fsm_display+0x100>)
 80004de:	2204      	movs	r2, #4
 80004e0:	601a      	str	r2, [r3, #0]
	  setTimer(SCANNING_TIME, EN_TIMER);
 80004e2:	2100      	movs	r1, #0
 80004e4:	20fa      	movs	r0, #250	; 0xfa
 80004e6:	f000 fd0f 	bl	8000f08 <setTimer>
	}
	break;
 80004ea:	e019      	b.n	8000520 <fsm_display+0xf4>
  case EN3:
	EN_on(EN3 - 1);
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 fbe7 	bl	8000cc0 <EN_on>
    display7SEG(SEG_buffer[EN3 - 1]);
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <fsm_display+0x104>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fc50 	bl	8000d9c <display7SEG>
	if(isTimerFlag(EN_TIMER) == 1) {
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fd29 	bl	8000f54 <isTimerFlag>
 8000502:	4603      	mov	r3, r0
 8000504:	2b01      	cmp	r3, #1
 8000506:	d10d      	bne.n	8000524 <fsm_display+0xf8>
	  status_display = EN0;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <fsm_display+0x100>)
 800050a:	2201      	movs	r2, #1
 800050c:	601a      	str	r2, [r3, #0]
	  setTimer(SCANNING_TIME, EN_TIMER);
 800050e:	2100      	movs	r1, #0
 8000510:	20fa      	movs	r0, #250	; 0xfa
 8000512:	f000 fcf9 	bl	8000f08 <setTimer>
	}
	break;
 8000516:	e005      	b.n	8000524 <fsm_display+0xf8>
    break;
 8000518:	bf00      	nop
 800051a:	e004      	b.n	8000526 <fsm_display+0xfa>
	break;
 800051c:	bf00      	nop
 800051e:	e002      	b.n	8000526 <fsm_display+0xfa>
	break;
 8000520:	bf00      	nop
 8000522:	e000      	b.n	8000526 <fsm_display+0xfa>
	break;
 8000524:	bf00      	nop
  }
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200000c0 	.word	0x200000c0
 8000530:	200000dc 	.word	0x200000dc

08000534 <blinkLED>:
//Blinky LED have 'color'
void blinkLED(int color) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  switch(status_blink) {
 800053c:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <blinkLED+0x8c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d024      	beq.n	800058e <blinkLED+0x5a>
 8000544:	2b02      	cmp	r3, #2
 8000546:	dc36      	bgt.n	80005b6 <blinkLED+0x82>
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <blinkLED+0x1e>
 800054c:	2b01      	cmp	r3, #1
 800054e:	d009      	beq.n	8000564 <blinkLED+0x30>
	  status_blink = LED_ON;
	  setTimer(BLINK_TIME, BLINK_TIMER);
	}
	break;
  }
}
 8000550:	e031      	b.n	80005b6 <blinkLED+0x82>
    status_blink = LED_ON;
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <blinkLED+0x8c>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
    setTimer(BLINK_TIME, BLINK_TIMER);
 8000558:	2106      	movs	r1, #6
 800055a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055e:	f000 fcd3 	bl	8000f08 <setTimer>
    break;
 8000562:	e028      	b.n	80005b6 <blinkLED+0x82>
	LED_on_ver(color);
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f000 fb27 	bl	8000bb8 <LED_on_ver>
	LED_on_hor(color);
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 fb56 	bl	8000c1c <LED_on_hor>
	if(isTimerFlag(BLINK_TIMER) == 1) {
 8000570:	2006      	movs	r0, #6
 8000572:	f000 fcef 	bl	8000f54 <isTimerFlag>
 8000576:	4603      	mov	r3, r0
 8000578:	2b01      	cmp	r3, #1
 800057a:	d119      	bne.n	80005b0 <blinkLED+0x7c>
	  status_blink = LED_OFF;
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <blinkLED+0x8c>)
 800057e:	2202      	movs	r2, #2
 8000580:	601a      	str	r2, [r3, #0]
	  setTimer(BLINK_TIME, BLINK_TIMER);
 8000582:	2106      	movs	r1, #6
 8000584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000588:	f000 fcbe 	bl	8000f08 <setTimer>
	break;
 800058c:	e010      	b.n	80005b0 <blinkLED+0x7c>
	LED_off();
 800058e:	f000 fb79 	bl	8000c84 <LED_off>
	if(isTimerFlag(BLINK_TIMER) == 1) {
 8000592:	2006      	movs	r0, #6
 8000594:	f000 fcde 	bl	8000f54 <isTimerFlag>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d10a      	bne.n	80005b4 <blinkLED+0x80>
	  status_blink = LED_ON;
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <blinkLED+0x8c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	601a      	str	r2, [r3, #0]
	  setTimer(BLINK_TIME, BLINK_TIMER);
 80005a4:	2106      	movs	r1, #6
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f000 fcad 	bl	8000f08 <setTimer>
	break;
 80005ae:	e001      	b.n	80005b4 <blinkLED+0x80>
	break;
 80005b0:	bf00      	nop
 80005b2:	e000      	b.n	80005b6 <blinkLED+0x82>
	break;
 80005b4:	bf00      	nop
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000c4 	.word	0x200000c4

080005c4 <returnINIT>:
/* Init -----*/
int status_manual = INIT;

/* Function ----*/
//Auto return to INIT
void returnINIT(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  status_manual = INIT;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <returnINIT+0x14>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
  setInit();
 80005ce:	f7ff ff11 	bl	80003f4 <setInit>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000

080005dc <inc_time>:
//Increasing time
void inc_time(void) {
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  time_hor++;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <inc_time+0x24>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a06      	ldr	r2, [pc, #24]	; (8000600 <inc_time+0x24>)
 80005e8:	6013      	str	r3, [r2, #0]
  if(time_hor > 99) {
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <inc_time+0x24>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b63      	cmp	r3, #99	; 0x63
 80005f0:	dd02      	ble.n	80005f8 <inc_time+0x1c>
    time_hor = 0;
 80005f2:	4b03      	ldr	r3, [pc, #12]	; (8000600 <inc_time+0x24>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
  }
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	200000cc 	.word	0x200000cc

08000604 <fsm_manual>:
//state machine
void fsm_manual(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  switch(status_manual) {
 8000608:	4b78      	ldr	r3, [pc, #480]	; (80007ec <fsm_manual+0x1e8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3b01      	subs	r3, #1
 800060e:	2b03      	cmp	r3, #3
 8000610:	f200 80e9 	bhi.w	80007e6 <fsm_manual+0x1e2>
 8000614:	a201      	add	r2, pc, #4	; (adr r2, 800061c <fsm_manual+0x18>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	0800062d 	.word	0x0800062d
 8000620:	08000667 	.word	0x08000667
 8000624:	080006e9 	.word	0x080006e9
 8000628:	0800076b 	.word	0x0800076b
  case INIT:
    fsm_auto_ver();
 800062c:	f7ff fd8e 	bl	800014c <fsm_auto_ver>
    fsm_auto_hor();
 8000630:	f7ff fe36 	bl	80002a0 <fsm_auto_hor>
    if(isButtonPressed(MODE_BUTTON) == 1) {
 8000634:	2000      	movs	r0, #0
 8000636:	f000 f98f 	bl	8000958 <isButtonPressed>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	f040 80cb 	bne.w	80007d8 <fsm_manual+0x1d4>
      status_manual = MAN_RED;
 8000642:	4b6a      	ldr	r3, [pc, #424]	; (80007ec <fsm_manual+0x1e8>)
 8000644:	2202      	movs	r2, #2
 8000646:	601a      	str	r2, [r3, #0]
      time_ver = MAN_RED;
 8000648:	4b69      	ldr	r3, [pc, #420]	; (80007f0 <fsm_manual+0x1ec>)
 800064a:	2202      	movs	r2, #2
 800064c:	601a      	str	r2, [r3, #0]
      time_hor = time_red;
 800064e:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <fsm_manual+0x1f0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a69      	ldr	r2, [pc, #420]	; (80007f8 <fsm_manual+0x1f4>)
 8000654:	6013      	str	r3, [r2, #0]
      restartDisplay();
 8000656:	f7ff fedd 	bl	8000414 <restartDisplay>
      setTimer(RETURN_INIT, INIT_TIMER);
 800065a:	2105      	movs	r1, #5
 800065c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000660:	f000 fc52 	bl	8000f08 <setTimer>
    }
    break;
 8000664:	e0b8      	b.n	80007d8 <fsm_manual+0x1d4>
  case MAN_RED:
	blinkLED(RED);
 8000666:	2000      	movs	r0, #0
 8000668:	f7ff ff64 	bl	8000534 <blinkLED>
	if(isButtonPressed(MODE_BUTTON) == 1) {
 800066c:	2000      	movs	r0, #0
 800066e:	f000 f973 	bl	8000958 <isButtonPressed>
 8000672:	4603      	mov	r3, r0
 8000674:	2b01      	cmp	r3, #1
 8000676:	d110      	bne.n	800069a <fsm_manual+0x96>
	  status_manual = MAN_AMBER;
 8000678:	4b5c      	ldr	r3, [pc, #368]	; (80007ec <fsm_manual+0x1e8>)
 800067a:	2203      	movs	r2, #3
 800067c:	601a      	str	r2, [r3, #0]
	  time_ver = MAN_AMBER;
 800067e:	4b5c      	ldr	r3, [pc, #368]	; (80007f0 <fsm_manual+0x1ec>)
 8000680:	2203      	movs	r2, #3
 8000682:	601a      	str	r2, [r3, #0]
	  time_hor = time_yellow;
 8000684:	4b5d      	ldr	r3, [pc, #372]	; (80007fc <fsm_manual+0x1f8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a5b      	ldr	r2, [pc, #364]	; (80007f8 <fsm_manual+0x1f4>)
 800068a:	6013      	str	r3, [r2, #0]
      restartDisplay();
 800068c:	f7ff fec2 	bl	8000414 <restartDisplay>
	  setTimer(RETURN_INIT, INIT_TIMER);
 8000690:	2105      	movs	r1, #5
 8000692:	f242 7010 	movw	r0, #10000	; 0x2710
 8000696:	f000 fc37 	bl	8000f08 <setTimer>
	}
	if(isButtonPressed(MODIFY_BUTTON) == 1) {
 800069a:	2001      	movs	r0, #1
 800069c:	f000 f95c 	bl	8000958 <isButtonPressed>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d106      	bne.n	80006b4 <fsm_manual+0xb0>
	  inc_time();
 80006a6:	f7ff ff99 	bl	80005dc <inc_time>
	  setTimer(RETURN_INIT, INIT_TIMER);
 80006aa:	2105      	movs	r1, #5
 80006ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80006b0:	f000 fc2a 	bl	8000f08 <setTimer>
	}
	if(isButtonPressed(SET_BUTTON) == 1) {
 80006b4:	2002      	movs	r0, #2
 80006b6:	f000 f94f 	bl	8000958 <isButtonPressed>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d108      	bne.n	80006d2 <fsm_manual+0xce>
	  time_red = time_hor;
 80006c0:	4b4d      	ldr	r3, [pc, #308]	; (80007f8 <fsm_manual+0x1f4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a4b      	ldr	r2, [pc, #300]	; (80007f4 <fsm_manual+0x1f0>)
 80006c6:	6013      	str	r3, [r2, #0]
	  setTimer(RETURN_INIT, INIT_TIMER);
 80006c8:	2105      	movs	r1, #5
 80006ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80006ce:	f000 fc1b 	bl	8000f08 <setTimer>
	}
	if(isTimerFlag(INIT_TIMER) == 1) {
 80006d2:	2005      	movs	r0, #5
 80006d4:	f000 fc3e 	bl	8000f54 <isTimerFlag>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d17e      	bne.n	80007dc <fsm_manual+0x1d8>
	  restartDisplay();
 80006de:	f7ff fe99 	bl	8000414 <restartDisplay>
	  returnINIT();
 80006e2:	f7ff ff6f 	bl	80005c4 <returnINIT>
	}
	break;
 80006e6:	e079      	b.n	80007dc <fsm_manual+0x1d8>
  case MAN_AMBER:
	blinkLED(YELLOW);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff ff23 	bl	8000534 <blinkLED>
	if(isButtonPressed(MODE_BUTTON) == 1) {
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f932 	bl	8000958 <isButtonPressed>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d110      	bne.n	800071c <fsm_manual+0x118>
	  status_manual = MAN_GREEN;
 80006fa:	4b3c      	ldr	r3, [pc, #240]	; (80007ec <fsm_manual+0x1e8>)
 80006fc:	2204      	movs	r2, #4
 80006fe:	601a      	str	r2, [r3, #0]
	  time_ver = MAN_GREEN;
 8000700:	4b3b      	ldr	r3, [pc, #236]	; (80007f0 <fsm_manual+0x1ec>)
 8000702:	2204      	movs	r2, #4
 8000704:	601a      	str	r2, [r3, #0]
	  time_hor = time_green;
 8000706:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <fsm_manual+0x1fc>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a3b      	ldr	r2, [pc, #236]	; (80007f8 <fsm_manual+0x1f4>)
 800070c:	6013      	str	r3, [r2, #0]
      restartDisplay();
 800070e:	f7ff fe81 	bl	8000414 <restartDisplay>
	  setTimer(RETURN_INIT, INIT_TIMER);
 8000712:	2105      	movs	r1, #5
 8000714:	f242 7010 	movw	r0, #10000	; 0x2710
 8000718:	f000 fbf6 	bl	8000f08 <setTimer>
	}
	if(isButtonPressed(MODIFY_BUTTON) == 1) {
 800071c:	2001      	movs	r0, #1
 800071e:	f000 f91b 	bl	8000958 <isButtonPressed>
 8000722:	4603      	mov	r3, r0
 8000724:	2b01      	cmp	r3, #1
 8000726:	d106      	bne.n	8000736 <fsm_manual+0x132>
	  inc_time();
 8000728:	f7ff ff58 	bl	80005dc <inc_time>
	  setTimer(RETURN_INIT, INIT_TIMER);
 800072c:	2105      	movs	r1, #5
 800072e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000732:	f000 fbe9 	bl	8000f08 <setTimer>
	}
	if(isButtonPressed(SET_BUTTON) == 1) {
 8000736:	2002      	movs	r0, #2
 8000738:	f000 f90e 	bl	8000958 <isButtonPressed>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d108      	bne.n	8000754 <fsm_manual+0x150>
	  time_yellow = time_hor;
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <fsm_manual+0x1f4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a2d      	ldr	r2, [pc, #180]	; (80007fc <fsm_manual+0x1f8>)
 8000748:	6013      	str	r3, [r2, #0]
	  setTimer(RETURN_INIT, INIT_TIMER);
 800074a:	2105      	movs	r1, #5
 800074c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000750:	f000 fbda 	bl	8000f08 <setTimer>
	}
	if(isTimerFlag(INIT_TIMER) == 1) {
 8000754:	2005      	movs	r0, #5
 8000756:	f000 fbfd 	bl	8000f54 <isTimerFlag>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d13f      	bne.n	80007e0 <fsm_manual+0x1dc>
	  restartDisplay();
 8000760:	f7ff fe58 	bl	8000414 <restartDisplay>
	  returnINIT();
 8000764:	f7ff ff2e 	bl	80005c4 <returnINIT>
	}
	break;
 8000768:	e03a      	b.n	80007e0 <fsm_manual+0x1dc>
  case MAN_GREEN:
	blinkLED(GREEN);
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff fee2 	bl	8000534 <blinkLED>
	if(isButtonPressed(MODE_BUTTON) == 1) {
 8000770:	2000      	movs	r0, #0
 8000772:	f000 f8f1 	bl	8000958 <isButtonPressed>
 8000776:	4603      	mov	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d106      	bne.n	800078a <fsm_manual+0x186>
	  status_manual = INIT;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <fsm_manual+0x1e8>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
      restartDisplay();
 8000782:	f7ff fe47 	bl	8000414 <restartDisplay>
	  setInit();
 8000786:	f7ff fe35 	bl	80003f4 <setInit>
	}
	if(isButtonPressed(MODIFY_BUTTON) == 1) {
 800078a:	2001      	movs	r0, #1
 800078c:	f000 f8e4 	bl	8000958 <isButtonPressed>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	d106      	bne.n	80007a4 <fsm_manual+0x1a0>
	  inc_time();
 8000796:	f7ff ff21 	bl	80005dc <inc_time>
	  setTimer(RETURN_INIT, INIT_TIMER);
 800079a:	2105      	movs	r1, #5
 800079c:	f242 7010 	movw	r0, #10000	; 0x2710
 80007a0:	f000 fbb2 	bl	8000f08 <setTimer>
	}
	if(isButtonPressed(SET_BUTTON) == 1) {
 80007a4:	2002      	movs	r0, #2
 80007a6:	f000 f8d7 	bl	8000958 <isButtonPressed>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d108      	bne.n	80007c2 <fsm_manual+0x1be>
	  time_green = time_hor;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <fsm_manual+0x1f4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <fsm_manual+0x1fc>)
 80007b6:	6013      	str	r3, [r2, #0]
	  setTimer(RETURN_INIT, INIT_TIMER);
 80007b8:	2105      	movs	r1, #5
 80007ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80007be:	f000 fba3 	bl	8000f08 <setTimer>
	}
	if(isTimerFlag(INIT_TIMER) == 1) {
 80007c2:	2005      	movs	r0, #5
 80007c4:	f000 fbc6 	bl	8000f54 <isTimerFlag>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10a      	bne.n	80007e4 <fsm_manual+0x1e0>
	  restartDisplay();
 80007ce:	f7ff fe21 	bl	8000414 <restartDisplay>
	  returnINIT();
 80007d2:	f7ff fef7 	bl	80005c4 <returnINIT>
	}
	break;
 80007d6:	e005      	b.n	80007e4 <fsm_manual+0x1e0>
    break;
 80007d8:	bf00      	nop
 80007da:	e004      	b.n	80007e6 <fsm_manual+0x1e2>
	break;
 80007dc:	bf00      	nop
 80007de:	e002      	b.n	80007e6 <fsm_manual+0x1e2>
	break;
 80007e0:	bf00      	nop
 80007e2:	e000      	b.n	80007e6 <fsm_manual+0x1e2>
	break;
 80007e4:	bf00      	nop
  }
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000
 80007f0:	200000c8 	.word	0x200000c8
 80007f4:	20000004 	.word	0x20000004
 80007f8:	200000cc 	.word	0x200000cc
 80007fc:	20000008 	.word	0x20000008
 8000800:	2000000c 	.word	0x2000000c

08000804 <checkIndex>:
int time_yellow = 2;
int time_green = 3;

/* Function -----*/
//Check index (0 <= Index < max)
int checkIndex(int index, int max) {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  if(index >= 0 && index < max) {
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db05      	blt.n	8000820 <checkIndex+0x1c>
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	da01      	bge.n	8000820 <checkIndex+0x1c>
	return 1;
 800081c:	2301      	movs	r3, #1
 800081e:	e000      	b.n	8000822 <checkIndex+0x1e>
  }
  return 0;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <getKeyInput>:
int TimeOutForKeyPress[NO_BUTTON] = {200};

/* Function -----*/
/* Button reading and debounce */
//debounce button
void getKeyInput() {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  for(int i = 0; i < NO_BUTTON; i++) {
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	e076      	b.n	8000926 <getKeyInput+0xfa>
    KeyReg2[i] = KeyReg1[i];
 8000838:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <getKeyInput+0x10c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000840:	493e      	ldr	r1, [pc, #248]	; (800093c <getKeyInput+0x110>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    KeyReg1[i] = KeyReg0[i];
 8000848:	4a3d      	ldr	r2, [pc, #244]	; (8000940 <getKeyInput+0x114>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000850:	4939      	ldr	r1, [pc, #228]	; (8000938 <getKeyInput+0x10c>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BUTTON[i]);
 8000858:	4a3a      	ldr	r2, [pc, #232]	; (8000944 <getKeyInput+0x118>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000860:	4619      	mov	r1, r3
 8000862:	4839      	ldr	r0, [pc, #228]	; (8000948 <getKeyInput+0x11c>)
 8000864:	f000 fedc 	bl	8001620 <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	4619      	mov	r1, r3
 800086c:	4a34      	ldr	r2, [pc, #208]	; (8000940 <getKeyInput+0x114>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000874:	4a30      	ldr	r2, [pc, #192]	; (8000938 <getKeyInput+0x10c>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800087c:	4930      	ldr	r1, [pc, #192]	; (8000940 <getKeyInput+0x114>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000884:	429a      	cmp	r2, r3
 8000886:	d14b      	bne.n	8000920 <getKeyInput+0xf4>
 8000888:	4a2b      	ldr	r2, [pc, #172]	; (8000938 <getKeyInput+0x10c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000890:	492a      	ldr	r1, [pc, #168]	; (800093c <getKeyInput+0x110>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000898:	429a      	cmp	r2, r3
 800089a:	d141      	bne.n	8000920 <getKeyInput+0xf4>
      if(KeyReg3[i] != KeyReg2[i]) {
 800089c:	4a2b      	ldr	r2, [pc, #172]	; (800094c <getKeyInput+0x120>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008a4:	4925      	ldr	r1, [pc, #148]	; (800093c <getKeyInput+0x110>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d018      	beq.n	80008e2 <getKeyInput+0xb6>
    	KeyReg3[i] = KeyReg2[i];
 80008b0:	4a22      	ldr	r2, [pc, #136]	; (800093c <getKeyInput+0x110>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008b8:	4924      	ldr	r1, [pc, #144]	; (800094c <getKeyInput+0x120>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	if(KeyReg3[i] == PRESSED_STATE) {
 80008c0:	4a22      	ldr	r2, [pc, #136]	; (800094c <getKeyInput+0x120>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d129      	bne.n	8000920 <getKeyInput+0xf4>
    	  TimeOutForKeyPress[i] = 200;
 80008cc:	4a20      	ldr	r2, [pc, #128]	; (8000950 <getKeyInput+0x124>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	21c8      	movs	r1, #200	; 0xc8
 80008d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	  button_flag[i] = 1;
 80008d6:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <getKeyInput+0x128>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2101      	movs	r1, #1
 80008dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80008e0:	e01e      	b.n	8000920 <getKeyInput+0xf4>
    	}
      }
      else {
        TimeOutForKeyPress[i]--;
 80008e2:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <getKeyInput+0x124>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	4918      	ldr	r1, [pc, #96]	; (8000950 <getKeyInput+0x124>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if(TimeOutForKeyPress[i] == 0) {
 80008f4:	4a16      	ldr	r2, [pc, #88]	; (8000950 <getKeyInput+0x124>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d10f      	bne.n	8000920 <getKeyInput+0xf4>
          if(KeyReg3[i] == PRESSED_STATE) {
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <getKeyInput+0x120>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d109      	bne.n	8000920 <getKeyInput+0xf4>
            TimeOutForKeyPress[i] = 50;
 800090c:	4a10      	ldr	r2, [pc, #64]	; (8000950 <getKeyInput+0x124>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2132      	movs	r1, #50	; 0x32
 8000912:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            button_flag[i] = 1;
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <getKeyInput+0x128>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2101      	movs	r1, #1
 800091c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < NO_BUTTON; i++) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b02      	cmp	r3, #2
 800092a:	dd85      	ble.n	8000838 <getKeyInput+0xc>
          }
        }
      }
    }
  }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000024 	.word	0x20000024
 800093c:	20000030 	.word	0x20000030
 8000940:	20000018 	.word	0x20000018
 8000944:	20000010 	.word	0x20000010
 8000948:	40010800 	.word	0x40010800
 800094c:	2000003c 	.word	0x2000003c
 8000950:	20000048 	.word	0x20000048
 8000954:	200000d0 	.word	0x200000d0

08000958 <isButtonPressed>:

/* Check button is pressed or not
 * Check button[index]
 */
int isButtonPressed(int index) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if(checkIndex(index, NO_BUTTON)) {
 8000960:	2103      	movs	r1, #3
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ff4e 	bl	8000804 <checkIndex>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00c      	beq.n	8000988 <isButtonPressed+0x30>
    if(button_flag[index] == 1) {
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <isButtonPressed+0x3c>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d106      	bne.n	8000988 <isButtonPressed+0x30>
      button_flag[index] = 0;
 800097a:	4a06      	ldr	r2, [pc, #24]	; (8000994 <isButtonPressed+0x3c>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2100      	movs	r1, #0
 8000980:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      return 1;
 8000984:	2301      	movs	r3, #1
 8000986:	e000      	b.n	800098a <isButtonPressed+0x32>
    }
  }
  return 0;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000d0 	.word	0x200000d0

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f000 fb56 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f80e 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f000 f894 	bl	8000ad0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009a8:	f000 f846 	bl	8000a38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <main+0x24>)
 80009ae:	f001 fa9f 	bl	8001ef0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	fsm_display();
 80009b2:	f7ff fd3b 	bl	800042c <fsm_display>
	fsm_manual();
 80009b6:	f7ff fe25 	bl	8000604 <fsm_manual>
	fsm_display();
 80009ba:	e7fa      	b.n	80009b2 <main+0x1a>
 80009bc:	20000124 	.word	0x20000124

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b090      	sub	sp, #64	; 0x40
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	2228      	movs	r2, #40	; 0x28
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fe46 	bl	8002660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e6:	2301      	movs	r3, #1
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ea:	2310      	movs	r3, #16
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fe42 	bl	8001680 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a02:	f000 f8d3 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	230f      	movs	r3, #15
 8000a08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 f8ae 	bl	8001b80 <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 f8bf 	bl	8000bac <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3740      	adds	r7, #64	; 0x40
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_TIM2_Init+0x94>)
 8000a56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_TIM2_Init+0x94>)
 8000a5e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_TIM2_Init+0x94>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_TIM2_Init+0x94>)
 8000a6c:	2209      	movs	r2, #9
 8000a6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_TIM2_Init+0x94>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_TIM2_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <MX_TIM2_Init+0x94>)
 8000a7e:	f001 f9e7 	bl	8001e50 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a88:	f000 f890 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <MX_TIM2_Init+0x94>)
 8000a9a:	f001 fb7d 	bl	8002198 <HAL_TIM_ConfigClockSource>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000aa4:	f000 f882 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_TIM2_Init+0x94>)
 8000ab6:	f001 fd45 	bl	8002544 <HAL_TIMEx_MasterConfigSynchronization>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ac0:	f000 f874 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000124 	.word	0x20000124

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <MX_GPIO_Init+0xb8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <MX_GPIO_Init+0xb8>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <MX_GPIO_Init+0xb8>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <MX_GPIO_Init+0xb8>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <MX_GPIO_Init+0xb8>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_GPIO_Init+0xb8>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_VER_Pin|YELLOW_VER_Pin|GREEN_VER_Pin|RED_HOR_Pin
 8000b14:	2200      	movs	r2, #0
 8000b16:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000b1a:	481c      	ldr	r0, [pc, #112]	; (8000b8c <MX_GPIO_Init+0xbc>)
 8000b1c:	f000 fd97 	bl	800164e <HAL_GPIO_WritePin>
                          |YELLOW_HOR_Pin|GREEN_HOR_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000b20:	2200      	movs	r2, #0
 8000b22:	217f      	movs	r1, #127	; 0x7f
 8000b24:	481a      	ldr	r0, [pc, #104]	; (8000b90 <MX_GPIO_Init+0xc0>)
 8000b26:	f000 fd92 	bl	800164e <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_VER_Pin YELLOW_VER_Pin GREEN_VER_Pin RED_HOR_Pin
                           YELLOW_HOR_Pin GREEN_HOR_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_VER_Pin|YELLOW_VER_Pin|GREEN_VER_Pin|RED_HOR_Pin
 8000b2a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000b2e:	60bb      	str	r3, [r7, #8]
                          |YELLOW_HOR_Pin|GREEN_HOR_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	4619      	mov	r1, r3
 8000b42:	4812      	ldr	r0, [pc, #72]	; (8000b8c <MX_GPIO_Init+0xbc>)
 8000b44:	f000 fbf2 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000b48:	237f      	movs	r3, #127	; 0x7f
 8000b4a:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2302      	movs	r3, #2
 8000b56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_GPIO_Init+0xc0>)
 8000b60:	f000 fbe4 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin MODIFY_Pin SET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|MODIFY_Pin|SET_Pin;
 8000b64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	4619      	mov	r1, r3
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_GPIO_Init+0xbc>)
 8000b7a:	f000 fbd7 	bl	800132c <HAL_GPIO_Init>

}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	40010c00 	.word	0x40010c00

08000b94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  timerRun();
 8000b9c:	f000 f9fa 	bl	8000f94 <timerRun>
  getKeyInput();
 8000ba0:	f7ff fe44 	bl	800082c <getKeyInput>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <LED_on_ver>:
//LED 7SEG buffer
int SEG_buffer[4] = {0};
/* Function -----*/
/* LED */
//Turn on LED have "color"
void LED_on_ver(int color) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if(checkIndex(color, NO_COLOR)) {
 8000bc0:	2103      	movs	r1, #3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fe1e 	bl	8000804 <checkIndex>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d01e      	beq.n	8000c0c <LED_on_ver+0x54>
	HAL_GPIO_WritePin(GPIOA, LED[color], 0);
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <LED_on_ver+0x5c>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480f      	ldr	r0, [pc, #60]	; (8000c18 <LED_on_ver+0x60>)
 8000bdc:	f000 fd37 	bl	800164e <HAL_GPIO_WritePin>
	for(int i = 0; i < NO_COLOR; i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e00f      	b.n	8000c06 <LED_on_ver+0x4e>
	  if(i != color) {
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d008      	beq.n	8000c00 <LED_on_ver+0x48>
	    HAL_GPIO_WritePin(GPIOA, LED[i], 1);
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <LED_on_ver+0x5c>)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <LED_on_ver+0x60>)
 8000bfc:	f000 fd27 	bl	800164e <HAL_GPIO_WritePin>
	for(int i = 0; i < NO_COLOR; i++) {
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3301      	adds	r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	ddec      	ble.n	8000be6 <LED_on_ver+0x2e>
	  }
	}
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000054 	.word	0x20000054
 8000c18:	40010800 	.word	0x40010800

08000c1c <LED_on_hor>:
void LED_on_hor(int color) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(checkIndex(color, NO_COLOR)) {
 8000c24:	2103      	movs	r1, #3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fdec 	bl	8000804 <checkIndex>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d020      	beq.n	8000c74 <LED_on_hor+0x58>
	HAL_GPIO_WritePin(GPIOA, LED[NO_COLOR + color], 0);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3303      	adds	r3, #3
 8000c36:	4a11      	ldr	r2, [pc, #68]	; (8000c7c <LED_on_hor+0x60>)
 8000c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480f      	ldr	r0, [pc, #60]	; (8000c80 <LED_on_hor+0x64>)
 8000c42:	f000 fd04 	bl	800164e <HAL_GPIO_WritePin>
	for(int i = 0; i < NO_COLOR; i++) {
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	e010      	b.n	8000c6e <LED_on_hor+0x52>
	  if(i != color) {
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d009      	beq.n	8000c68 <LED_on_hor+0x4c>
	    HAL_GPIO_WritePin(GPIOA, LED[NO_COLOR + i], 1);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3303      	adds	r3, #3
 8000c58:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <LED_on_hor+0x60>)
 8000c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4619      	mov	r1, r3
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <LED_on_hor+0x64>)
 8000c64:	f000 fcf3 	bl	800164e <HAL_GPIO_WritePin>
	for(int i = 0; i < NO_COLOR; i++) {
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	ddeb      	ble.n	8000c4c <LED_on_hor+0x30>
	  }
	}
  }
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000054 	.word	0x20000054
 8000c80:	40010800 	.word	0x40010800

08000c84 <LED_off>:
//Turn off all LED
void LED_off(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  for(int i = 0; i < NO_LED; i++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e00b      	b.n	8000ca8 <LED_off+0x24>
    HAL_GPIO_WritePin(GPIOA, LED[i], 1);
 8000c90:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <LED_off+0x34>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <LED_off+0x38>)
 8000c9e:	f000 fcd6 	bl	800164e <HAL_GPIO_WritePin>
  for(int i = 0; i < NO_LED; i++) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	ddf0      	ble.n	8000c90 <LED_off+0xc>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000054 	.word	0x20000054
 8000cbc:	40010800 	.word	0x40010800

08000cc0 <EN_on>:
/* EN */
//turn on EN[index] pin
void EN_on(int index) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < NO_EN; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	e019      	b.n	8000d02 <EN_on+0x42>
    if(i == index) {
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d109      	bne.n	8000cea <EN_on+0x2a>
      HAL_GPIO_WritePin(GPIOA, EN[i], 0);
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <EN_on+0x54>)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <EN_on+0x58>)
 8000ce4:	f000 fcb3 	bl	800164e <HAL_GPIO_WritePin>
 8000ce8:	e008      	b.n	8000cfc <EN_on+0x3c>
    }
    else {
      HAL_GPIO_WritePin(GPIOA, EN[i], 1);
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <EN_on+0x54>)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <EN_on+0x58>)
 8000cf8:	f000 fca9 	bl	800164e <HAL_GPIO_WritePin>
  for(int i = 0; i < NO_EN; i++) {
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	dde2      	ble.n	8000cce <EN_on+0xe>
    }
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000060 	.word	0x20000060
 8000d18:	40010800 	.word	0x40010800

08000d1c <updateBuffer>:
/* LED 7SEG */
//update LED 7SEG buffer
void updateBuffer(void) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  SEG_buffer[0] = time_ver / 10;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <updateBuffer+0x70>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <updateBuffer+0x74>)
 8000d26:	fb82 1203 	smull	r1, r2, r2, r3
 8000d2a:	1092      	asrs	r2, r2, #2
 8000d2c:	17db      	asrs	r3, r3, #31
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <updateBuffer+0x78>)
 8000d32:	6013      	str	r3, [r2, #0]
  SEG_buffer[1] = time_ver % 10;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <updateBuffer+0x70>)
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <updateBuffer+0x74>)
 8000d3a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d3e:	109a      	asrs	r2, r3, #2
 8000d40:	17cb      	asrs	r3, r1, #31
 8000d42:	1ad2      	subs	r2, r2, r3
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	1aca      	subs	r2, r1, r3
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <updateBuffer+0x78>)
 8000d50:	605a      	str	r2, [r3, #4]
  SEG_buffer[2] = time_hor / 10;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <updateBuffer+0x7c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <updateBuffer+0x74>)
 8000d58:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5c:	1092      	asrs	r2, r2, #2
 8000d5e:	17db      	asrs	r3, r3, #31
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <updateBuffer+0x78>)
 8000d64:	6093      	str	r3, [r2, #8]
  SEG_buffer[3] = time_hor % 10;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <updateBuffer+0x7c>)
 8000d68:	6819      	ldr	r1, [r3, #0]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <updateBuffer+0x74>)
 8000d6c:	fb83 2301 	smull	r2, r3, r3, r1
 8000d70:	109a      	asrs	r2, r3, #2
 8000d72:	17cb      	asrs	r3, r1, #31
 8000d74:	1ad2      	subs	r2, r2, r3
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	1aca      	subs	r2, r1, r3
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <updateBuffer+0x78>)
 8000d82:	60da      	str	r2, [r3, #12]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	200000c8 	.word	0x200000c8
 8000d90:	66666667 	.word	0x66666667
 8000d94:	200000dc 	.word	0x200000dc
 8000d98:	200000cc 	.word	0x200000cc

08000d9c <display7SEG>:
/* 7SEG LED control */
//display 7 SEGMENT LED
void display7SEG(int num) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if(checkIndex(num, 10)) {
 8000da4:	210a      	movs	r1, #10
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fd2c 	bl	8000804 <checkIndex>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d011      	beq.n	8000dd6 <display7SEG+0x3a>
	HAL_GPIO_WritePin(GPIOB, offSEG7[num], SET);
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <display7SEG+0x44>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <display7SEG+0x48>)
 8000dc0:	f000 fc45 	bl	800164e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG7[num], RESET);
 8000dc4:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <display7SEG+0x4c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <display7SEG+0x48>)
 8000dd2:	f000 fc3c 	bl	800164e <HAL_GPIO_WritePin>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000007c 	.word	0x2000007c
 8000de4:	40010c00 	.word	0x40010c00
 8000de8:	20000068 	.word	0x20000068

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_MspInit+0x5c>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <HAL_MspInit+0x5c>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6193      	str	r3, [r2, #24]
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_MspInit+0x5c>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_MspInit+0x5c>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_MspInit+0x5c>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_MspInit+0x5c>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_MspInit+0x60>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_MspInit+0x60>)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000

08000e50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e60:	d113      	bne.n	8000e8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_TIM_Base_MspInit+0x44>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_TIM_Base_MspInit+0x44>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_TIM_Base_MspInit+0x44>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	201c      	movs	r0, #28
 8000e80:	f000 fa1d 	bl	80012be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e84:	201c      	movs	r0, #28
 8000e86:	f000 fa36 	bl	80012f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr

08000eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ede:	f000 f8fb 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <TIM2_IRQHandler+0x10>)
 8000eee:	f001 f84b 	bl	8001f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000124 	.word	0x20000124

08000efc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <setTimer>:
int counter[NO_Timer] = {0};
int flag[NO_Timer] = {0};

/* Function -----*/
//Set time on timer[index] = duration
void setTimer(int duration, int index) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  if(index >= 0 && index < NO_Timer) {
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db12      	blt.n	8000f3e <setTimer+0x36>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	dc0f      	bgt.n	8000f3e <setTimer+0x36>
	  counter[index] = duration / TIMER_CYCLE;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a09      	ldr	r2, [pc, #36]	; (8000f48 <setTimer+0x40>)
 8000f22:	fb82 1203 	smull	r1, r2, r2, r3
 8000f26:	1092      	asrs	r2, r2, #2
 8000f28:	17db      	asrs	r3, r3, #31
 8000f2a:	1ad2      	subs	r2, r2, r3
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <setTimer+0x44>)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  flag[index] = 0;
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <setTimer+0x48>)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	66666667 	.word	0x66666667
 8000f4c:	200000ec 	.word	0x200000ec
 8000f50:	20000108 	.word	0x20000108

08000f54 <isTimerFlag>:

//Check timer out on timer[index]
int isTimerFlag(int index) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < NO_Timer) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0f      	blt.n	8000f82 <isTimerFlag+0x2e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b06      	cmp	r3, #6
 8000f66:	dc0c      	bgt.n	8000f82 <isTimerFlag+0x2e>
		if(flag[index] == 1) {
 8000f68:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <isTimerFlag+0x3c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d106      	bne.n	8000f82 <isTimerFlag+0x2e>
			flag[index] = 0;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <isTimerFlag+0x3c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <isTimerFlag+0x30>
		}
	}
	return 0;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000108 	.word	0x20000108

08000f94 <timerRun>:

//Run timer (counter on timer)
void timerRun(void) {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
  for(int i = 0; i < NO_Timer; i++) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e021      	b.n	8000fe4 <timerRun+0x50>
	if(counter[i] > 0) {
 8000fa0:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <timerRun+0x64>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dd18      	ble.n	8000fde <timerRun+0x4a>
	  counter[i]--;
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <timerRun+0x64>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb4:	1e5a      	subs	r2, r3, #1
 8000fb6:	4910      	ldr	r1, [pc, #64]	; (8000ff8 <timerRun+0x64>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  if(counter[i] <= 0) {
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <timerRun+0x64>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	dc09      	bgt.n	8000fde <timerRun+0x4a>
		counter[i] = 0;
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <timerRun+0x64>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2100      	movs	r1, #0
 8000fd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flag[i] = 1;
 8000fd4:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <timerRun+0x68>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < NO_Timer; i++) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	ddda      	ble.n	8000fa0 <timerRun+0xc>
	  }
	}
  }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200000ec 	.word	0x200000ec
 8000ffc:	20000108 	.word	0x20000108

08001000 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	; (8001044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001026:	f7ff ff69 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f001 faf5 	bl	8002618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800102e:	f7ff fcb3 	bl	8000998 <main>
  bx lr
 8001032:	4770      	bx	lr
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800103c:	080026b0 	.word	0x080026b0
  ldr r2, =_sbss
 8001040:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001044:	20000170 	.word	0x20000170

08001048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_2_IRQHandler>
	...

0800104c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_Init+0x28>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_Init+0x28>)
 8001056:	f043 0310 	orr.w	r3, r3, #16
 800105a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f923 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fec0 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40022000 	.word	0x40022000

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f93b 	bl	8001312 <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 f903 	bl	80012be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000090 	.word	0x20000090
 80010d0:	20000098 	.word	0x20000098
 80010d4:	20000094 	.word	0x20000094

080010d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_IncTick+0x1c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_IncTick+0x20>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a03      	ldr	r2, [pc, #12]	; (80010f8 <HAL_IncTick+0x20>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	20000098 	.word	0x20000098
 80010f8:	2000016c 	.word	0x2000016c

080010fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b02      	ldr	r3, [pc, #8]	; (800110c <HAL_GetTick+0x10>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	2000016c 	.word	0x2000016c

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4906      	ldr	r1, [pc, #24]	; (80011a8 <__NVIC_EnableIRQ+0x34>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001274:	d301      	bcc.n	800127a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2301      	movs	r3, #1
 8001278:	e00f      	b.n	800129a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <SysTick_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001282:	210f      	movs	r1, #15
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f7ff ff90 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SysTick_Config+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SysTick_Config+0x40>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff2d 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff42 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff90 	bl	8001200 <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff5f 	bl	80011ac <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff35 	bl	8001174 <__NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffa2 	bl	8001264 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b08b      	sub	sp, #44	; 0x2c
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	e148      	b.n	80015d2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001340:	2201      	movs	r2, #1
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8137 	bne.w	80015cc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4aa3      	ldr	r2, [pc, #652]	; (80015f0 <HAL_GPIO_Init+0x2c4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d05e      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001368:	4aa1      	ldr	r2, [pc, #644]	; (80015f0 <HAL_GPIO_Init+0x2c4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d875      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800136e:	4aa1      	ldr	r2, [pc, #644]	; (80015f4 <HAL_GPIO_Init+0x2c8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d058      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001374:	4a9f      	ldr	r2, [pc, #636]	; (80015f4 <HAL_GPIO_Init+0x2c8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d86f      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800137a:	4a9f      	ldr	r2, [pc, #636]	; (80015f8 <HAL_GPIO_Init+0x2cc>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d052      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001380:	4a9d      	ldr	r2, [pc, #628]	; (80015f8 <HAL_GPIO_Init+0x2cc>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d869      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 8001386:	4a9d      	ldr	r2, [pc, #628]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d04c      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 800138c:	4a9b      	ldr	r2, [pc, #620]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d863      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 8001392:	4a9b      	ldr	r2, [pc, #620]	; (8001600 <HAL_GPIO_Init+0x2d4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d046      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001398:	4a99      	ldr	r2, [pc, #612]	; (8001600 <HAL_GPIO_Init+0x2d4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d85d      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800139e:	2b12      	cmp	r3, #18
 80013a0:	d82a      	bhi.n	80013f8 <HAL_GPIO_Init+0xcc>
 80013a2:	2b12      	cmp	r3, #18
 80013a4:	d859      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 80013a6:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <HAL_GPIO_Init+0x80>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	08001427 	.word	0x08001427
 80013b0:	08001401 	.word	0x08001401
 80013b4:	08001413 	.word	0x08001413
 80013b8:	08001455 	.word	0x08001455
 80013bc:	0800145b 	.word	0x0800145b
 80013c0:	0800145b 	.word	0x0800145b
 80013c4:	0800145b 	.word	0x0800145b
 80013c8:	0800145b 	.word	0x0800145b
 80013cc:	0800145b 	.word	0x0800145b
 80013d0:	0800145b 	.word	0x0800145b
 80013d4:	0800145b 	.word	0x0800145b
 80013d8:	0800145b 	.word	0x0800145b
 80013dc:	0800145b 	.word	0x0800145b
 80013e0:	0800145b 	.word	0x0800145b
 80013e4:	0800145b 	.word	0x0800145b
 80013e8:	0800145b 	.word	0x0800145b
 80013ec:	0800145b 	.word	0x0800145b
 80013f0:	08001409 	.word	0x08001409
 80013f4:	0800141d 	.word	0x0800141d
 80013f8:	4a82      	ldr	r2, [pc, #520]	; (8001604 <HAL_GPIO_Init+0x2d8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013fe:	e02c      	b.n	800145a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e029      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	3304      	adds	r3, #4
 800140e:	623b      	str	r3, [r7, #32]
          break;
 8001410:	e024      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	3308      	adds	r3, #8
 8001418:	623b      	str	r3, [r7, #32]
          break;
 800141a:	e01f      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	330c      	adds	r3, #12
 8001422:	623b      	str	r3, [r7, #32]
          break;
 8001424:	e01a      	b.n	800145c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800142e:	2304      	movs	r3, #4
 8001430:	623b      	str	r3, [r7, #32]
          break;
 8001432:	e013      	b.n	800145c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d105      	bne.n	8001448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800143c:	2308      	movs	r3, #8
 800143e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	611a      	str	r2, [r3, #16]
          break;
 8001446:	e009      	b.n	800145c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001448:	2308      	movs	r3, #8
 800144a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	615a      	str	r2, [r3, #20]
          break;
 8001452:	e003      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e000      	b.n	800145c <HAL_GPIO_Init+0x130>
          break;
 800145a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2bff      	cmp	r3, #255	; 0xff
 8001460:	d801      	bhi.n	8001466 <HAL_GPIO_Init+0x13a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	e001      	b.n	800146a <HAL_GPIO_Init+0x13e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3304      	adds	r3, #4
 800146a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2bff      	cmp	r3, #255	; 0xff
 8001470:	d802      	bhi.n	8001478 <HAL_GPIO_Init+0x14c>
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	e002      	b.n	800147e <HAL_GPIO_Init+0x152>
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	3b08      	subs	r3, #8
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	210f      	movs	r1, #15
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	6a39      	ldr	r1, [r7, #32]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	431a      	orrs	r2, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 8090 	beq.w	80015cc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ac:	4b56      	ldr	r3, [pc, #344]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a55      	ldr	r2, [pc, #340]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b53      	ldr	r3, [pc, #332]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c4:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_GPIO_Init+0x2e0>)
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a49      	ldr	r2, [pc, #292]	; (8001610 <HAL_GPIO_Init+0x2e4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d00d      	beq.n	800150c <HAL_GPIO_Init+0x1e0>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a48      	ldr	r2, [pc, #288]	; (8001614 <HAL_GPIO_Init+0x2e8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d007      	beq.n	8001508 <HAL_GPIO_Init+0x1dc>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a47      	ldr	r2, [pc, #284]	; (8001618 <HAL_GPIO_Init+0x2ec>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d101      	bne.n	8001504 <HAL_GPIO_Init+0x1d8>
 8001500:	2302      	movs	r3, #2
 8001502:	e004      	b.n	800150e <HAL_GPIO_Init+0x1e2>
 8001504:	2303      	movs	r3, #3
 8001506:	e002      	b.n	800150e <HAL_GPIO_Init+0x1e2>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_GPIO_Init+0x1e2>
 800150c:	2300      	movs	r3, #0
 800150e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001510:	f002 0203 	and.w	r2, r2, #3
 8001514:	0092      	lsls	r2, r2, #2
 8001516:	4093      	lsls	r3, r2
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800151e:	493b      	ldr	r1, [pc, #236]	; (800160c <HAL_GPIO_Init+0x2e0>)
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001538:	4b38      	ldr	r3, [pc, #224]	; (800161c <HAL_GPIO_Init+0x2f0>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4937      	ldr	r1, [pc, #220]	; (800161c <HAL_GPIO_Init+0x2f0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001546:	4b35      	ldr	r3, [pc, #212]	; (800161c <HAL_GPIO_Init+0x2f0>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	43db      	mvns	r3, r3
 800154e:	4933      	ldr	r1, [pc, #204]	; (800161c <HAL_GPIO_Init+0x2f0>)
 8001550:	4013      	ands	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001560:	4b2e      	ldr	r3, [pc, #184]	; (800161c <HAL_GPIO_Init+0x2f0>)
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	492d      	ldr	r1, [pc, #180]	; (800161c <HAL_GPIO_Init+0x2f0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_GPIO_Init+0x2f0>)
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	4929      	ldr	r1, [pc, #164]	; (800161c <HAL_GPIO_Init+0x2f0>)
 8001578:	4013      	ands	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_GPIO_Init+0x2f0>)
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	4923      	ldr	r1, [pc, #140]	; (800161c <HAL_GPIO_Init+0x2f0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_GPIO_Init+0x2f0>)
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	491f      	ldr	r1, [pc, #124]	; (800161c <HAL_GPIO_Init+0x2f0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_GPIO_Init+0x2f0>)
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	4919      	ldr	r1, [pc, #100]	; (800161c <HAL_GPIO_Init+0x2f0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60cb      	str	r3, [r1, #12]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_GPIO_Init+0x2f0>)
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4915      	ldr	r1, [pc, #84]	; (800161c <HAL_GPIO_Init+0x2f0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	3301      	adds	r3, #1
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f47f aeaf 	bne.w	8001340 <HAL_GPIO_Init+0x14>
  }
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	372c      	adds	r7, #44	; 0x2c
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	10320000 	.word	0x10320000
 80015f4:	10310000 	.word	0x10310000
 80015f8:	10220000 	.word	0x10220000
 80015fc:	10210000 	.word	0x10210000
 8001600:	10120000 	.word	0x10120000
 8001604:	10110000 	.word	0x10110000
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000
 8001610:	40010800 	.word	0x40010800
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40011000 	.word	0x40011000
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e001      	b.n	8001642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	807b      	strh	r3, [r7, #2]
 800165a:	4613      	mov	r3, r2
 800165c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165e:	787b      	ldrb	r3, [r7, #1]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001664:	887a      	ldrh	r2, [r7, #2]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800166a:	e003      	b.n	8001674 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	041a      	lsls	r2, r3, #16
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	611a      	str	r2, [r3, #16]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
	...

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e26c      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 8087 	beq.w	80017ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a0:	4b92      	ldr	r3, [pc, #584]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d00c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ac:	4b8f      	ldr	r3, [pc, #572]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d112      	bne.n	80016de <HAL_RCC_OscConfig+0x5e>
 80016b8:	4b8c      	ldr	r3, [pc, #560]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c4:	d10b      	bne.n	80016de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c6:	4b89      	ldr	r3, [pc, #548]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d06c      	beq.n	80017ac <HAL_RCC_OscConfig+0x12c>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d168      	bne.n	80017ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e246      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x76>
 80016e8:	4b80      	ldr	r3, [pc, #512]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a7f      	ldr	r2, [pc, #508]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e02e      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x98>
 80016fe:	4b7b      	ldr	r3, [pc, #492]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a7a      	ldr	r2, [pc, #488]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b78      	ldr	r3, [pc, #480]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a77      	ldr	r2, [pc, #476]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e01d      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0xbc>
 8001722:	4b72      	ldr	r3, [pc, #456]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a71      	ldr	r2, [pc, #452]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6e      	ldr	r2, [pc, #440]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 800173c:	4b6b      	ldr	r3, [pc, #428]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a6a      	ldr	r2, [pc, #424]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a67      	ldr	r2, [pc, #412]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fcce 	bl	80010fc <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fcca 	bl	80010fc <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	; 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e1fa      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0xe4>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fcba 	bl	80010fc <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fcb6 	bl	80010fc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1e6      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x10c>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d063      	beq.n	8001882 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ba:	4b4c      	ldr	r3, [pc, #304]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017c6:	4b49      	ldr	r3, [pc, #292]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d11c      	bne.n	800180c <HAL_RCC_OscConfig+0x18c>
 80017d2:	4b46      	ldr	r3, [pc, #280]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d116      	bne.n	800180c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	4b43      	ldr	r3, [pc, #268]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e1ba      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4939      	ldr	r1, [pc, #228]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	e03a      	b.n	8001882 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001814:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff fc6f 	bl	80010fc <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fc6b 	bl	80010fc <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e19b      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4927      	ldr	r1, [pc, #156]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e015      	b.n	8001882 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fc4e 	bl	80010fc <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fc4a 	bl	80010fc <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e17a      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d03a      	beq.n	8001904 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d019      	beq.n	80018ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_RCC_OscConfig+0x274>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7ff fc2e 	bl	80010fc <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff fc2a 	bl	80010fc <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e15a      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f000 faa6 	bl	8001e14 <RCC_Delay>
 80018c8:	e01c      	b.n	8001904 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_RCC_OscConfig+0x274>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7ff fc14 	bl	80010fc <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d6:	e00f      	b.n	80018f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff fc10 	bl	80010fc <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d908      	bls.n	80018f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e140      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	42420000 	.word	0x42420000
 80018f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	4b9e      	ldr	r3, [pc, #632]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e9      	bne.n	80018d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80a6 	beq.w	8001a5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001916:	4b97      	ldr	r3, [pc, #604]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10d      	bne.n	800193e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b94      	ldr	r3, [pc, #592]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a93      	ldr	r2, [pc, #588]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b91      	ldr	r3, [pc, #580]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193a:	2301      	movs	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b8e      	ldr	r3, [pc, #568]	; (8001b78 <HAL_RCC_OscConfig+0x4f8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d118      	bne.n	800197c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	4b8b      	ldr	r3, [pc, #556]	; (8001b78 <HAL_RCC_OscConfig+0x4f8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a8a      	ldr	r2, [pc, #552]	; (8001b78 <HAL_RCC_OscConfig+0x4f8>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7ff fbd1 	bl	80010fc <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff fbcd 	bl	80010fc <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b64      	cmp	r3, #100	; 0x64
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e0fd      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4b81      	ldr	r3, [pc, #516]	; (8001b78 <HAL_RCC_OscConfig+0x4f8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x312>
 8001984:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a7a      	ldr	r2, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	e02d      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x334>
 800199a:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a75      	ldr	r2, [pc, #468]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a72      	ldr	r2, [pc, #456]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6213      	str	r3, [r2, #32]
 80019b2:	e01c      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d10c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x356>
 80019bc:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a6c      	ldr	r2, [pc, #432]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a69      	ldr	r2, [pc, #420]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	e00b      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a66      	ldr	r2, [pc, #408]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d015      	beq.n	8001a22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f6:	f7ff fb81 	bl	80010fc <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff fb7d 	bl	80010fc <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0ab      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ee      	beq.n	80019fe <HAL_RCC_OscConfig+0x37e>
 8001a20:	e014      	b.n	8001a4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fb6b 	bl	80010fc <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fb67 	bl	80010fc <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e095      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ee      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d105      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a52:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a47      	ldr	r2, [pc, #284]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8081 	beq.w	8001b6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a68:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d061      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d146      	bne.n	8001b0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <HAL_RCC_OscConfig+0x4fc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff fb3b 	bl	80010fc <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff fb37 	bl	80010fc <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e067      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab2:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	492d      	ldr	r1, [pc, #180]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a19      	ldr	r1, [r3, #32]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	4927      	ldr	r1, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_RCC_OscConfig+0x4fc>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fb0b 	bl	80010fc <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7ff fb07 	bl	80010fc <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e037      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x46a>
 8001b08:	e02f      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_RCC_OscConfig+0x4fc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff faf4 	bl	80010fc <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff faf0 	bl	80010fc <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e020      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x498>
 8001b36:	e018      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e013      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	42420060 	.word	0x42420060

08001b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0d0      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b94:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d910      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b67      	ldr	r3, [pc, #412]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 0207 	bic.w	r2, r3, #7
 8001baa:	4965      	ldr	r1, [pc, #404]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0b8      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bdc:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001be6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	494d      	ldr	r1, [pc, #308]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d040      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d115      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e07f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3e:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e073      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e06b      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5e:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f023 0203 	bic.w	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4936      	ldr	r1, [pc, #216]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c70:	f7ff fa44 	bl	80010fc <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7ff fa40 	bl	80010fc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e053      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 020c 	and.w	r2, r3, #12
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1eb      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d210      	bcs.n	8001cd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 0207 	bic.w	r2, r3, #7
 8001cb6:	4922      	ldr	r1, [pc, #136]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e032      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4916      	ldr	r1, [pc, #88]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	490e      	ldr	r1, [pc, #56]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d0e:	f000 f821 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	490a      	ldr	r1, [pc, #40]	; (8001d48 <HAL_RCC_ClockConfig+0x1c8>)
 8001d20:	5ccb      	ldrb	r3, [r1, r3]
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x1cc>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x1d0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f9a2 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08002698 	.word	0x08002698
 8001d4c:	20000090 	.word	0x20000090
 8001d50:	20000094 	.word	0x20000094

08001d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	b490      	push	{r4, r7}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d5c:	1d3c      	adds	r4, r7, #4
 8001d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d64:	f240 2301 	movw	r3, #513	; 0x201
 8001d68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x40>
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d003      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x46>
 8001d92:	e02d      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d96:	623b      	str	r3, [r7, #32]
      break;
 8001d98:	e02d      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	0c9b      	lsrs	r3, r3, #18
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001da6:	4413      	add	r3, r2
 8001da8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	0c5b      	lsrs	r3, r3, #17
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd2:	fb02 f203 	mul.w	r2, r2, r3
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	e004      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	623b      	str	r3, [r7, #32]
      break;
 8001dee:	e002      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df2:	623b      	str	r3, [r7, #32]
      break;
 8001df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df6:	6a3b      	ldr	r3, [r7, #32]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc90      	pop	{r4, r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	08002688 	.word	0x08002688
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	007a1200 	.word	0x007a1200
 8001e10:	003d0900 	.word	0x003d0900

08001e14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <RCC_Delay+0x34>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <RCC_Delay+0x38>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0a5b      	lsrs	r3, r3, #9
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e30:	bf00      	nop
  }
  while (Delay --);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	60fa      	str	r2, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f9      	bne.n	8001e30 <RCC_Delay+0x1c>
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	20000090 	.word	0x20000090
 8001e4c:	10624dd3 	.word	0x10624dd3

08001e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e041      	b.n	8001ee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe ffea 	bl	8000e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	f000 fa6a 	bl	8002368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d001      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e035      	b.n	8001f74 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <HAL_TIM_Base_Start_IT+0x90>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_TIM_Base_Start_IT+0x4e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f32:	d004      	beq.n	8001f3e <HAL_TIM_Base_Start_IT+0x4e>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <HAL_TIM_Base_Start_IT+0x94>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d111      	bne.n	8001f62 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d010      	beq.n	8001f72 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f60:	e007      	b.n	8001f72 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40012c00 	.word	0x40012c00
 8001f84:	40000400 	.word	0x40000400

08001f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d122      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d11b      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0202 	mvn.w	r2, #2
 8001fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f9b1 	bl	8002332 <HAL_TIM_IC_CaptureCallback>
 8001fd0:	e005      	b.n	8001fde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f9a4 	bl	8002320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f9b3 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d122      	bne.n	8002038 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d11b      	bne.n	8002038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0204 	mvn.w	r2, #4
 8002008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f987 	bl	8002332 <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f97a 	bl	8002320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f989 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b08      	cmp	r3, #8
 8002044:	d122      	bne.n	800208c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b08      	cmp	r3, #8
 8002052:	d11b      	bne.n	800208c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0208 	mvn.w	r2, #8
 800205c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2204      	movs	r2, #4
 8002062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f95d 	bl	8002332 <HAL_TIM_IC_CaptureCallback>
 8002078:	e005      	b.n	8002086 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f950 	bl	8002320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f95f 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b10      	cmp	r3, #16
 8002098:	d122      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	d11b      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0210 	mvn.w	r2, #16
 80020b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2208      	movs	r2, #8
 80020b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f933 	bl	8002332 <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f926 	bl	8002320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f935 	bl	8002344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10e      	bne.n	800210c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0201 	mvn.w	r2, #1
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe fd44 	bl	8000b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b80      	cmp	r3, #128	; 0x80
 8002118:	d10e      	bne.n	8002138 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d107      	bne.n	8002138 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fa67 	bl	8002606 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	2b40      	cmp	r3, #64	; 0x40
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	2b40      	cmp	r3, #64	; 0x40
 8002152:	d107      	bne.n	8002164 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f8f9 	bl	8002356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b20      	cmp	r3, #32
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b20      	cmp	r3, #32
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0220 	mvn.w	r2, #32
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fa32 	bl	80025f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_TIM_ConfigClockSource+0x18>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e0b3      	b.n	8002318 <HAL_TIM_ConfigClockSource+0x180>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e8:	d03e      	beq.n	8002268 <HAL_TIM_ConfigClockSource+0xd0>
 80021ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ee:	f200 8087 	bhi.w	8002300 <HAL_TIM_ConfigClockSource+0x168>
 80021f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f6:	f000 8085 	beq.w	8002304 <HAL_TIM_ConfigClockSource+0x16c>
 80021fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fe:	d87f      	bhi.n	8002300 <HAL_TIM_ConfigClockSource+0x168>
 8002200:	2b70      	cmp	r3, #112	; 0x70
 8002202:	d01a      	beq.n	800223a <HAL_TIM_ConfigClockSource+0xa2>
 8002204:	2b70      	cmp	r3, #112	; 0x70
 8002206:	d87b      	bhi.n	8002300 <HAL_TIM_ConfigClockSource+0x168>
 8002208:	2b60      	cmp	r3, #96	; 0x60
 800220a:	d050      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x116>
 800220c:	2b60      	cmp	r3, #96	; 0x60
 800220e:	d877      	bhi.n	8002300 <HAL_TIM_ConfigClockSource+0x168>
 8002210:	2b50      	cmp	r3, #80	; 0x50
 8002212:	d03c      	beq.n	800228e <HAL_TIM_ConfigClockSource+0xf6>
 8002214:	2b50      	cmp	r3, #80	; 0x50
 8002216:	d873      	bhi.n	8002300 <HAL_TIM_ConfigClockSource+0x168>
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d058      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x136>
 800221c:	2b40      	cmp	r3, #64	; 0x40
 800221e:	d86f      	bhi.n	8002300 <HAL_TIM_ConfigClockSource+0x168>
 8002220:	2b30      	cmp	r3, #48	; 0x30
 8002222:	d064      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x156>
 8002224:	2b30      	cmp	r3, #48	; 0x30
 8002226:	d86b      	bhi.n	8002300 <HAL_TIM_ConfigClockSource+0x168>
 8002228:	2b20      	cmp	r3, #32
 800222a:	d060      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x156>
 800222c:	2b20      	cmp	r3, #32
 800222e:	d867      	bhi.n	8002300 <HAL_TIM_ConfigClockSource+0x168>
 8002230:	2b00      	cmp	r3, #0
 8002232:	d05c      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x156>
 8002234:	2b10      	cmp	r3, #16
 8002236:	d05a      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002238:	e062      	b.n	8002300 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f000 f95c 	bl	8002506 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800225c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	609a      	str	r2, [r3, #8]
      break;
 8002266:	e04e      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f000 f945 	bl	8002506 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800228a:	609a      	str	r2, [r3, #8]
      break;
 800228c:	e03b      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	461a      	mov	r2, r3
 800229c:	f000 f8bc 	bl	8002418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2150      	movs	r1, #80	; 0x50
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f913 	bl	80024d2 <TIM_ITRx_SetConfig>
      break;
 80022ac:	e02b      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f000 f8da 	bl	8002474 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2160      	movs	r1, #96	; 0x60
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f903 	bl	80024d2 <TIM_ITRx_SetConfig>
      break;
 80022cc:	e01b      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6859      	ldr	r1, [r3, #4]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	461a      	mov	r2, r3
 80022dc:	f000 f89c 	bl	8002418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2140      	movs	r1, #64	; 0x40
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f8f3 	bl	80024d2 <TIM_ITRx_SetConfig>
      break;
 80022ec:	e00b      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	4610      	mov	r0, r2
 80022fa:	f000 f8ea 	bl	80024d2 <TIM_ITRx_SetConfig>
        break;
 80022fe:	e002      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002300:	bf00      	nop
 8002302:	e000      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002304:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a25      	ldr	r2, [pc, #148]	; (8002410 <TIM_Base_SetConfig+0xa8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <TIM_Base_SetConfig+0x28>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d003      	beq.n	8002390 <TIM_Base_SetConfig+0x28>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a22      	ldr	r2, [pc, #136]	; (8002414 <TIM_Base_SetConfig+0xac>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d108      	bne.n	80023a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <TIM_Base_SetConfig+0xa8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <TIM_Base_SetConfig+0x52>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b0:	d003      	beq.n	80023ba <TIM_Base_SetConfig+0x52>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a17      	ldr	r2, [pc, #92]	; (8002414 <TIM_Base_SetConfig+0xac>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d108      	bne.n	80023cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <TIM_Base_SetConfig+0xa8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d103      	bne.n	8002400 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	615a      	str	r2, [r3, #20]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	40012c00 	.word	0x40012c00
 8002414:	40000400 	.word	0x40000400

08002418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f023 0201 	bic.w	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f023 030a 	bic.w	r3, r3, #10
 8002454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	621a      	str	r2, [r3, #32]
}
 800246a:	bf00      	nop
 800246c:	371c      	adds	r7, #28
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f023 0210 	bic.w	r2, r3, #16
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800249e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	031b      	lsls	r3, r3, #12
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	621a      	str	r2, [r3, #32]
}
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f043 0307 	orr.w	r3, r3, #7
 80024f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	609a      	str	r2, [r3, #8]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002506:	b480      	push	{r7}
 8002508:	b087      	sub	sp, #28
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002520:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	021a      	lsls	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	431a      	orrs	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4313      	orrs	r3, r2
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	609a      	str	r2, [r3, #8]
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002558:	2302      	movs	r3, #2
 800255a:	e041      	b.n	80025e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a14      	ldr	r2, [pc, #80]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a8:	d004      	beq.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d10c      	bne.n	80025ce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40000400 	.word	0x40000400

080025f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <__libc_init_array>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	2600      	movs	r6, #0
 800261c:	4d0c      	ldr	r5, [pc, #48]	; (8002650 <__libc_init_array+0x38>)
 800261e:	4c0d      	ldr	r4, [pc, #52]	; (8002654 <__libc_init_array+0x3c>)
 8002620:	1b64      	subs	r4, r4, r5
 8002622:	10a4      	asrs	r4, r4, #2
 8002624:	42a6      	cmp	r6, r4
 8002626:	d109      	bne.n	800263c <__libc_init_array+0x24>
 8002628:	f000 f822 	bl	8002670 <_init>
 800262c:	2600      	movs	r6, #0
 800262e:	4d0a      	ldr	r5, [pc, #40]	; (8002658 <__libc_init_array+0x40>)
 8002630:	4c0a      	ldr	r4, [pc, #40]	; (800265c <__libc_init_array+0x44>)
 8002632:	1b64      	subs	r4, r4, r5
 8002634:	10a4      	asrs	r4, r4, #2
 8002636:	42a6      	cmp	r6, r4
 8002638:	d105      	bne.n	8002646 <__libc_init_array+0x2e>
 800263a:	bd70      	pop	{r4, r5, r6, pc}
 800263c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002640:	4798      	blx	r3
 8002642:	3601      	adds	r6, #1
 8002644:	e7ee      	b.n	8002624 <__libc_init_array+0xc>
 8002646:	f855 3b04 	ldr.w	r3, [r5], #4
 800264a:	4798      	blx	r3
 800264c:	3601      	adds	r6, #1
 800264e:	e7f2      	b.n	8002636 <__libc_init_array+0x1e>
 8002650:	080026a8 	.word	0x080026a8
 8002654:	080026a8 	.word	0x080026a8
 8002658:	080026a8 	.word	0x080026a8
 800265c:	080026ac 	.word	0x080026ac

08002660 <memset>:
 8002660:	4603      	mov	r3, r0
 8002662:	4402      	add	r2, r0
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <memset+0xa>
 8002668:	4770      	bx	lr
 800266a:	f803 1b01 	strb.w	r1, [r3], #1
 800266e:	e7f9      	b.n	8002664 <memset+0x4>

08002670 <_init>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	bf00      	nop
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr

0800267c <_fini>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	bf00      	nop
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr
